// Generated by purs version 0.13.8
"use strict";
var Concur_React_DOM = require("../Concur.React.DOM/index.js");
var React_DOM_SVG = require("../React.DOM.SVG/index.js");
var tspan = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.tspan);
    };
};
var tspan$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return tspan(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var text = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.text);
    };
};
var text$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return text(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var svg = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.svg);
    };
};
var svg$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return svg(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var stop = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.stop);
    };
};
var stop$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return stop(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var rect = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.rect);
    };
};
var rect$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return rect(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var radialGradient = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.radialGradient);
    };
};
var radialGradient$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return radialGradient(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var polyline = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.polyline);
    };
};
var polyline$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return polyline(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var polygon = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.polygon);
    };
};
var polygon$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return polygon(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var pattern = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.pattern);
    };
};
var pattern$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return pattern(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var path = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.path);
    };
};
var path$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return path(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var mask = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.mask);
    };
};
var mask$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return mask(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var linearGradient = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.linearGradient);
    };
};
var linearGradient$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return linearGradient(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var line = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.line);
    };
};
var line$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return line(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var g = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.g);
    };
};
var g$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return g(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var foreignObject = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.foreignObject);
    };
};
var ellipse = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.ellipse);
    };
};
var ellipse$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return ellipse(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var defs = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.defs);
    };
};
var defs$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return defs(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var clipPath = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.clipPath);
    };
};
var clipPath$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return clipPath(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
var circle = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)(React_DOM_SVG.circle);
    };
};
var circle$prime = function (dictMultiAlternative) {
    return function (dictShiftMap) {
        return circle(dictMultiAlternative)(dictShiftMap)([  ]);
    };
};
module.exports = {
    circle: circle,
    "circle'": circle$prime,
    clipPath: clipPath,
    "clipPath'": clipPath$prime,
    defs: defs,
    "defs'": defs$prime,
    ellipse: ellipse,
    "ellipse'": ellipse$prime,
    foreignObject: foreignObject,
    g: g,
    "g'": g$prime,
    line: line,
    "line'": line$prime,
    linearGradient: linearGradient,
    "linearGradient'": linearGradient$prime,
    mask: mask,
    "mask'": mask$prime,
    path: path,
    "path'": path$prime,
    pattern: pattern,
    "pattern'": pattern$prime,
    polygon: polygon,
    "polygon'": polygon$prime,
    polyline: polyline,
    "polyline'": polyline$prime,
    radialGradient: radialGradient,
    "radialGradient'": radialGradient$prime,
    rect: rect,
    "rect'": rect$prime,
    stop: stop,
    "stop'": stop$prime,
    svg: svg,
    "svg'": svg$prime,
    text: text,
    "text'": text$prime,
    tspan: tspan,
    "tspan'": tspan$prime
};
