// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect = require("../Effect/index.js");
var MonadFix = function (Monad0, mfix) {
    this.Monad0 = Monad0;
    this.mfix = mfix;
};
var monadFixIdentity = new MonadFix(function () {
    return Data_Identity.monadIdentity;
}, function ($15) {
    return Data_Identity.Identity($foreign.fixPure((function (v) {
        var $16 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        return function ($17) {
            return $16(v($17));
        };
    })($15)));
});
var monadFixFunction = new MonadFix(function () {
    return Control_Monad.monadFn;
}, function (f) {
    return function (r) {
        return $foreign.fixPure(Data_Function.flip(f)(r));
    };
});
var monadFixEff = new MonadFix(function () {
    return Effect.monadEffect;
}, $foreign.fixEffect);
var mfix = function (dict) {
    return dict.mfix;
};
var monadFixRWST = function (dictMonoid) {
    return function (dictMonadFix) {
        return new MonadFix(function () {
            return Control_Monad_RWS_Trans.monadRWST(dictMonadFix.Monad0())(dictMonoid);
        }, function (f) {
            return function (r) {
                return function (s) {
                    return mfix(dictMonadFix)(function (t) {
                        return Control_Monad_RWS_Trans.runRWST(f(function (u) {
                            var v = t(u);
                            return v.value1;
                        }))(r)(s);
                    });
                };
            };
        });
    };
};
var monadFixReaderT = function (dictMonadFix) {
    return new MonadFix(function () {
        return Control_Monad_Reader_Trans.monadReaderT(dictMonadFix.Monad0());
    }, function (f) {
        return function (r) {
            return mfix(dictMonadFix)((function () {
                var $18 = Data_Function.flip(Control_Monad_Reader_Trans.runReaderT)(r);
                return function ($19) {
                    return $18(f($19));
                };
            })());
        };
    });
};
var monadFixStateT = function (dictMonadFix) {
    return new MonadFix(function () {
        return Control_Monad_State_Trans.monadStateT(dictMonadFix.Monad0());
    }, function (f) {
        return function (s) {
            return mfix(dictMonadFix)((function () {
                var $20 = Data_Function.flip(Control_Monad_State_Trans.runStateT)(s);
                return function ($21) {
                    return $20(f((function (v) {
                        return function ($22) {
                            return Data_Tuple.fst(v($22));
                        };
                    })($21)));
                };
            })());
        };
    });
};
var monadFixWriterT = function (dictMonadFix) {
    return function (dictMonoid) {
        return new MonadFix(function () {
            return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictMonadFix.Monad0());
        }, function (f) {
            return Control_Monad_Writer_Trans.WriterT(mfix(dictMonadFix)(function ($23) {
                return Control_Monad_Writer_Trans.runWriterT(f((function (v) {
                    return function ($24) {
                        return Data_Tuple.fst(v($24));
                    };
                })($23)));
            }));
        });
    };
};
module.exports = {
    mfix: mfix,
    MonadFix: MonadFix,
    monadFixRWST: monadFixRWST,
    monadFixIdentity: monadFixIdentity,
    monadFixEff: monadFixEff,
    monadFixFunction: monadFixFunction,
    monadFixReaderT: monadFixReaderT,
    monadFixStateT: monadFixStateT,
    monadFixWriterT: monadFixWriterT,
    fixEffect: $foreign.fixEffect,
    fixPure: $foreign.fixPure
};
