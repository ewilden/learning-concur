// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Cofree = require("../Control.Cofree/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var update = Control_Cofree.tail;
var step = Control_Cofree.mkCofree;
var poll = function (dictMonad) {
    return function (b) {
        return Control_Apply.apply((dictMonad.Bind1()).Apply0())(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(step)(Control_Comonad.extract(Control_Cofree.comonadCofree(((dictMonad.Bind1()).Apply0()).Functor0()))(b)))(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(poll(dictMonad))(update(b)));
    };
};
var oneShot = function (dictMonad) {
    return function (s) {
        var v = Control_Comonad.extract(Control_Cofree.comonadCofree(((dictMonad.Bind1()).Apply0()).Functor0()))(s);
        if (v instanceof Data_Maybe.Nothing) {
            return Control_Bind.bind(dictMonad.Bind1())(update(s))(oneShot(dictMonad));
        };
        if (v instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(dictMonad.Applicative0())(v.value0);
        };
        throw new Error("Failed pattern match at Concur.Core.FRP (line 164, column 13 - line 166, column 19): " + [ v.constructor.name ]);
    };
};
var loopW = function (dictMonad) {
    return function (a) {
        return function (f) {
            var go = function (x) {
                return loopW(dictMonad)(x)(f);
            };
            return step(a)(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(go)(f(a)));
        };
    };
};
var loopS = function (dictMonad) {
    return function (a) {
        return function (f) {
            var $$this = f(a);
            return step(Control_Comonad.extract(Control_Cofree.comonadCofree(((dictMonad.Bind1()).Apply0()).Functor0()))($$this))(Control_Bind.bind(dictMonad.Bind1())(update($$this))(function (s) {
                return Control_Applicative.pure(dictMonad.Applicative0())(loopS(dictMonad)(Control_Comonad.extract(Control_Cofree.comonadCofree(((dictMonad.Bind1()).Apply0()).Functor0()))(s))(f));
            }));
        };
    };
};
var stateLoopS = function (dictMonad) {
    return function (dictAlternative) {
        return function (def) {
            return function (w) {
                return Data_Functor.map(Control_Cofree.functorCofree(((dictAlternative.Plus1()).Alt0()).Functor0()))(Data_Either.hush)(loopS(dictMonad)(new Data_Either.Left(def))(Data_Either.either(w)((function () {
                    var $34 = Control_Applicative.pure(Control_Cofree.applicativeCofree(dictAlternative));
                    return function ($35) {
                        return $34(Data_Either.Right.create($35));
                    };
                })())));
            };
        };
    };
};
var justWait = function (dictMonad) {
    return function (dictAlternative) {
        return function (b) {
            return function (s) {
                return function (f) {
                    return Control_Bind.bind(Control_Cofree.bindCofree(dictAlternative))(s)(function (m) {
                        if (m instanceof Data_Maybe.Nothing) {
                            return Control_Applicative.pure(Control_Cofree.applicativeCofree(dictAlternative))(b);
                        };
                        if (m instanceof Data_Maybe.Just) {
                            return f(m.value0);
                        };
                        throw new Error("Failed pattern match at Concur.Core.FRP (line 61, column 3 - line 63, column 18): " + [ m.constructor.name ]);
                    });
                };
            };
        };
    };
};
var hold = function (dictMonad) {
    return function (a) {
        return function (w) {
            return step(a)(Control_Bind.bind(dictMonad.Bind1())(w)(function (a$prime) {
                return Control_Applicative.pure(dictMonad.Applicative0())(hold(dictMonad)(a$prime)(w));
            }));
        };
    };
};
var foldp = function (dictFunctor) {
    return function (f) {
        return function (a) {
            return function (sb) {
                var a$prime = f(a)(Control_Comonad.extract(Control_Cofree.comonadCofree(dictFunctor))(sb));
                return step(a$prime)(Data_Functor.map(dictFunctor)(foldp(dictFunctor)(f)(a$prime))(update(sb)));
            };
        };
    };
};
var fireOnce = function (dictMonad) {
    return function (dictPlus) {
        return function (w) {
            return step(Data_Maybe.Nothing.value)(Control_Bind.bind(dictMonad.Bind1())(w)(function (a) {
                return Control_Applicative.pure(dictMonad.Applicative0())(step(new Data_Maybe.Just(a))(Control_Plus.empty(dictPlus)));
            }));
        };
    };
};
var justEffect = function (dictMonadEffect) {
    return function (dictMonad) {
        return function (dictAlternative) {
            return function (b) {
                return function (e) {
                    return function (f) {
                        return justWait(dictMonad)(dictAlternative)(b)(fireOnce(dictMonad)(dictAlternative.Plus1())(Effect_Class.liftEffect(dictMonadEffect)(e)))(f);
                    };
                };
            };
        };
    };
};
var dyn = function (dictMonad) {
    return function (s) {
        return Control_Bind.bind(dictMonad.Bind1())(update(s))(dyn(dictMonad));
    };
};
var display = function (w) {
    return step(Data_Unit.unit)(w);
};
var fireOnce_ = function (dictMonad) {
    return function (dictPlus) {
        return function (w) {
            return display(Control_Apply.applySecond((dictMonad.Bind1()).Apply0())(w)(Control_Plus.empty(dictPlus)));
        };
    };
};
var demand$prime = function (dictMonad) {
    return function (f) {
        return oneShot(dictMonad)(f(Data_Maybe.Nothing.value));
    };
};
var demand = function (dictMonad) {
    return oneShot(dictMonad);
};
var demandLoop = function (dictMonad) {
    return function (dictAlternative) {
        return function (def) {
            return function (w) {
                return demand(dictMonad)(stateLoopS(dictMonad)(dictAlternative)(def)(w));
            };
        };
    };
};
var debounce = function (dictMonad) {
    return function (dictAlt) {
        return function (dictMonadAff) {
            return function (timeoutMs) {
                return function (ainit) {
                    return function (winit) {
                        var go$prime = function (a) {
                            return function (w) {
                                return Control_Bind.bind(dictMonad.Bind1())(Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Data_Maybe.Just.create)(w(a)))(Data_Functor.voidRight(dictAlt.Functor0())(Data_Maybe.Nothing.value)(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.delay(timeoutMs)))))(function (res) {
                                    if (res instanceof Data_Maybe.Nothing) {
                                        return Control_Applicative.pure(dictMonad.Applicative0())(go(a)(w));
                                    };
                                    if (res instanceof Data_Maybe.Just) {
                                        return go$prime(res.value0)(w);
                                    };
                                    throw new Error("Failed pattern match at Concur.Core.FRP (line 214, column 7 - line 218, column 28): " + [ res.constructor.name ]);
                                });
                            };
                        };
                        var go = function (a) {
                            return function (w) {
                                return step(a)(Control_Bind.bind(dictMonad.Bind1())(w(a))(function (a$prime) {
                                    return go$prime(a$prime)(w);
                                }));
                            };
                        };
                        return go(ainit)(winit);
                    };
                };
            };
        };
    };
};
var always = function (dictMonad) {
    return function (dictAlternative) {
        return Control_Applicative.pure(Control_Cofree.applicativeCofree(dictAlternative));
    };
};
module.exports = {
    step: step,
    display: display,
    fireOnce: fireOnce,
    fireOnce_: fireOnce_,
    justWait: justWait,
    justEffect: justEffect,
    always: always,
    update: update,
    poll: poll,
    hold: hold,
    loopW: loopW,
    loopS: loopS,
    foldp: foldp,
    dyn: dyn,
    oneShot: oneShot,
    demand: demand,
    "demand'": demand$prime,
    demandLoop: demandLoop,
    stateLoopS: stateLoopS,
    debounce: debounce
};
